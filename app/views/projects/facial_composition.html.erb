<div class="wrapper">
  <div class="profile">

    <section class="profile-content" id="content">
      <div class="profile-description">
        <p>Facial Composition with Variational Autoencoder and Bayesian Optimization</p>
      </div>
      <div class="menu-category">
        <h3 class="menu-category-name">Introduction</h3>
        <article class="article-text">
          This project applies VAE and Bayesian Optimization to the composition of facial images. With the right image databases to train from, it could have wide applications from
          photo editing to suspect facial construction. <br>
          <br>
          This project is based on the <%= link_to 'Bayesian Methods for Machine learning course','https://www.coursera.org/learn/bayesian-methods-in-machine-learning'%>
          and <%= link_to 'Deep Learning with Python book', 'https://www.manning.com/books/deep-learning-with-python' %>

        </article>
      </div>
      <div class="menu-category">
        <h3 class="menu-category-name">Data</h3>
        <article class="article-text">
          Alligned & Cropped version of <%= link_to 'CelebA' , 'https://www.dropbox.com/sh/8oqt9vytwxb3s4r/AADSNUu0bseoCKuxuI5ZeTl1a/Img?dl=0&preview=img_align_celeba.zip'%> <br>
          The original <%= link_to 'CelebA website','http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html'%>.
        </article>
      </div>
      <div class="menu-category">
        <h3 class="menu-category-name">Model</h3>
        <article>
          <%= link_to "Variational Autoencoder", "https://arxiv.org/abs/1606.05908" %> is a type of generative neural network model.
          It makes strong assumptions for the distribution of latent variables, which allows it to map the original representations onto a continuous
          latent space. We could move along the space and any point on this latent space is able to be reconstructed into a similar form with the original representation. <br>
          <br>
          With <%= link_to "Bayesian Optimization", "https://www.mathworks.com/help/stats/bayesian-optimization-algorithm.html"%> we could heuristically solve optimization problem
          with a few sampling points and without an explicit expression for objective function. <br>
          Utilizing this, we could build an intelligent user interface, which is able to locate
          the desired result from a large search space by asking the user a few simple comparisons. <br>
          <br>
          VAE is great for learning latent spaces that are well structured, where specific directions encode a meaningful axis of variation in the data. <br>
          With facial data, we could potentially identify independent vectors in latent space that allows us to manipulate the image such as turn a male to a female face,
          turn a sad face into a smile face.<br>
          That also means, with Bayesian Optimization, we could search the latent space to freely adjust for the features we want in a face (e.g. smile to sad, male to female, black hair to grey hair etc.).<br>
        </article>
      </div>
      <div class="menu-category">
        <h3 class="menu-category-name">Implementation</h3>
        <%= link_to "source code" , "https://github.com/luliu31415926/facial_composition"%><br>
        The VAE neural network was built and trained with Keras and tensorflow. <br>
        The image data with shape (64,64,3) was encoded into two 8 dimensions variables z_mean and z_log_var <br>
        The decoder then decode point on the latent space back to a image.<br>
        <br>
        <caption> Sample images decoced from latent space</caption>
        <%= image_tag("facial_composition/decoded_sample_images.png", :alt => "sample images decoded from latent space") %>
        <br>
        <p>
          Bayesian Optimization is implemented with the
          <%= link_to 'bayes_opt module','https://github.com/fmfn/BayesianOptimization/tree/master/bayes_opt'%>
        </p>
        <br>
        <caption>
          The search procedure starts by randomly displaying some images for the user,
          and ask the user to select the best and worst image
        </caption>
        <%= image_tag("facial_composition/initial_selection.png", :alt => "initial set of images to show user") %><br>
        <caption>
          After assigning an initial rating for the best and worst images,
          the bayesian optimization algorithm then select the next point to sample by maximizing the acquisition function
          ('Expected Improvement' in this case). <br>
          A kappa parameter can be adjusted to choose the explore vs. exploit ratio for the algorithm. <br>
          <br>
          After the initialization, the algorithm then run a predefined number of iterations: each time sample a image
          to the user, asking for a rating by providing the current top 5 images in the pool and their corresponding ratings as reference.<br>
          <br>
          (Try to find smiling female)
          <%= image_tag("facial_composition/iteration_phase.png", :alt => "sample iteration") %><br>
          The algorithm ends by displaying the best image it could find in the predefined iterations. <br>
          <%= image_tag("facial_composition/best_image.png", :alt => "best image") %><br>
        </caption>

        <article>
        </article>
      </div>

      <div class="menu-category">
        <h3 class="menu-category-name">Demo</h3>
        <p> interactive demo currently under construction</p>
      </div>
    </section>
  </div>
</div>

